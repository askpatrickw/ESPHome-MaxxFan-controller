esphome:
  name: maxxfan
  friendly_name: MaxxFan
  includes:
    - custom_outputs.h
  on_boot:
    # Lowest priority; wait until everything else is done
    priority: -100
  # Need to set initial values during boot sequence
  # Two situations:   1: ESP32 was restarted without disconnecting MaxxFan power
  #                   2: Both ESP32 and MaxxFan were re-powered
  # 1. For ESP32 restart, need to use restore values saved to flash by ESP32
  # 2. For full re-power, the MaxxFan default values are:
  #    power = off; speed = 4; direction = exhaust (reverse); cover = closed
    then:
      lambda: |-
        ESP_LOGD("boot", "Executing on_boot logic");
        if (!id(is_restart)) {
          // Not a restart condition, therefore likely a full re-power.
          // Apply default MaxxFan settings otherwise it will just 
          // use settings which should have been saved by ESP32.
          ESP_LOGD("boot", "Setting globals to re-power values");
          id(actual_fan_power) = 0;     //Off
          id(actual_fan_speed) = 4;     //40%
          id(actual_fan_direction) = 1; //Exhaust
          id(actual_fan_cover) = 0;     //Closed
        }
        ESP_LOGD("boot", "Updating entities with values from globals");
        // Usually you can set power and speed in same call, but when you do it
        // sets power first, which will immediately turn on with speed of 10
        // which is the default setting when speed is 0/unknown. So make two calls
        // and set the speed first.
        auto call = id(MaxxFan).make_call();
        call.set_speed(id(actual_fan_speed));
        call.perform();
        call.set_state(id(actual_fan_power));
        call.perform();
        id(maxxfan_direction).publish_state(id(actual_fan_direction));
        id(maxxfan_cover).publish_state(id(actual_fan_cover));
        ESP_LOGD("boot", "Power set to: %d", id(actual_fan_power));
        ESP_LOGD("boot", "Speed set to: %d", id(actual_fan_speed));
        ESP_LOGD("boot", "Direction set to: %d", id(actual_fan_direction));
        ESP_LOGD("boot", "Cover set to: %d", id(actual_fan_cover));
        // Set thermostat fan speed to AUTO if UNKNOWN
        if (id(houghton).fan_mode == NULL) {
          auto call = id(houghton).make_call();
          call.set_fan_mode("AUTO");
          call.perform();
        }
        // Reset flags for next boot
        id(is_restart) = false;
        id(is_boot_finished) = true;
  on_shutdown:
  # Clicking Restart button in UI will trigger controlled shutdown/restart vs. just 
  # disconnecting powerfrom both the fan and ESP32, which will not trigger on_shutdown.
    priority: 600
    # Set indicator
    then:
      - lambda: |-
          id(is_restart) = true;
          ESP_LOGD("shutdown", "Restart set to: %d", id(is_restart));

esp32:
  board: wemos_d1_mini32

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "TcGiPF//EV3XtI5uFQUfC2PY3SC0JvdREHwTnCp1Aug="

ota:
  password: "1ac996384f7272b220c931ca7cebaab5"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Maxxfan Fallback Hotspot"
    password: "0nXMOS1Bnf0P"

captive_portal:

i2c:
  # Standard i2c pins for ESP32
  sda: 21
  scl: 22
  scan: true
  id: bus_a

globals:
  # Need this to know if on_boot is a restart or repower
  - id: is_restart
    type: bool
    initial_value: '0'
    restore_value: true
  # Need this to know if boot finished; don't execute output actions
  # unless boot has finished to prevent UI overriding actual values
  - id: is_boot_finished
    type: bool
    initial_value: '0'
    restore_value: false
  # Used to keep track of actual settings in fan itself.  UI controls 
  # need to be synchronized to match these actual settings. Required 
  # because speed adjustment requires incremental button presses, and 
  # MaxxFan automatically changes cover state whenever power is pressed.
  - id: actual_fan_speed
    type: int
    initial_value: '4'
    restore_value: true
  - id: actual_fan_power
    type: bool
    initial_value: '0'
    restore_value: true
  - id: actual_fan_direction
    type: bool
    initial_value: '1'
    restore_value: true
  - id: actual_fan_cover
    type: bool
    initial_value: '0'
    restore_value: true
  # GPIO pin configurations
  - id: gpio_down_pin
    type: int
    initial_value: "26"
    restore_value: no
  - id: gpio_up_pin
    type: int
    initial_value: "23"
    restore_value: no
  - id: gpio_power_pin
    type: int
    initial_value: "33"
    restore_value: no
  - id: gpio_direction_pin
    type: int
    initial_value: "27"
    restore_value: no
  - id: gpio_auto_pin
    type: int
    initial_value: "25"
    restore_value: no

fan:
  # Main fan entity for power and speed
    - platform: speed
      name: Fan
      id: MaxxFan
      output: output_speed
      # Restore settings hanlded by on_boot
      restore_mode: NO_RESTORE
      # 0 is not real MaxxFan speed, but HA uses it
      # to reflect off status; can't avoid unless unbundle
      # and use numeric input/slider control to keep track
      # of speed.
      speed_count: 10 
      on_turn_on:
          output.turn_on: output_power
      on_turn_off:
        output.turn_off: output_power

output:
  # Custom output for when power changed 
  - platform: custom
    type: binary 
    lambda: |-
      auto my_power_output = new PowerOutput();
      App.register_component(my_power_output);
      return {my_power_output};
    outputs:
      id: output_power
  # Custom output for when speed changed 
  - platform: custom
    type: float 
    lambda: |-
      auto my_speed_output = new SpeedOutput();
      App.register_component(my_speed_output);
      return {my_speed_output};
    outputs:
      id: output_speed
  # Custom output for when direction changed
  - platform: custom
    type: binary 
    lambda: |-
      auto my_direction_output = new DirectionOutput();
      App.register_component(my_direction_output);
      return {my_direction_output};
    outputs:
      id: output_direction
  # Custom output for when cover changed
  - platform: custom
    type: binary 
    lambda: |-
      auto my_cover_output = new CoverOutput();
      App.register_component(my_cover_output);
      return {my_cover_output};
    outputs:
        id: output_cover

remote_receiver:
  # IR receiver linked to pin 34 on ESP32
  pin: 
    number: GPIO34
    inverted: yes
  dump: raw
  idle: 50ms

remote_transmitter:
  id: my_remote_transmitter
  # IR LED linked to pin 18 on ESP32
  pin: 18
  # Infrared remotes use a 50% carrier signal
  carrier_duty_percent: 50%

switch:
# Switch for controlling cover open/close.
  - platform: output
    name: Cover
    output: output_cover
    id: maxxfan_cover
# Switch for controlling fan direction.
  - platform: output
    name: Direction
    output: output_direction
    id: maxxfan_direction

binary_sensor:
  # Reports if ESP32 is connected to HA via WiFi or not
    - platform: status
      name: Status

time:
  # Get time from HA and update timestamp after time sync
  - platform: homeassistant
    id: current_time
    on_time_sync:
      - component.update: timestamp

sensor:
  # This reports how long ESP32 has been powered up. Does not have a name
  # so it will not show up in HA or get written to HA DB.
  - platform: uptime
    id: uptime_sec
  # This gets updated once whenever HA syncs with ESP32.  This prevents
  # DB bloat within HA.  It uses the uptime sensor to calculate when
  # ESP32 first powered up, and then reports this state to HA.
  - platform: template
    id: timestamp
    name: timestamp
    device_class: timestamp
    entity_category: diagnostic
    accuracy_decimals: 0
    update_interval: never
    lambda: |-
      static float timestamp = (
        id(current_time).utcnow().timestamp - id(uptime_sec).state
      );
      return timestamp;
# AHT21 temperature and humidity sensor on ESP32 I2C bus
  - platform: aht10
    update_interval: 60s
    temperature:
      name: "Temperature"
      id: maxxfan_temp
      accuracy_decimals: 1
      filters:
      #- lambda: return x * (9.0/5.0) + 32.0;
      - multiply: .95 # compensate for observed differential
      - delta: 0.1
      #unit_of_measurement: "Â°F"
    humidity:
      name: "Humidity"
      id: maxxfan_humidity
      accuracy_decimals: 0
      filters:
        - delta: 0.1
# INA226 current sensor on ESP32 I2C bus
  - platform: ina226
    address: 0x40
    # Comes stock with .100 ohm; I replaced with .008 ohm
    shunt_resistance: 0.008 ohm
    # This is max current per MaxxFan specs
    max_current: 5.0A
    update_interval: 1s
    current:
      name: "Current"
      accuracy_decimals: 1
      filters:
        - offset: -0.08   #observation is that sensor reads .08A high across full range
        - lambda: |-
            if (x >= 0.038) return x;
            else return 0.038;
        - delta: 0.1
    power:
      name: "Power"
      accuracy_decimals: 0
      filters:
        - multiply: .953  # see voltage adjustment below
        - offset: -1.0    # observation is that sensor reads 1W high across full range
        - lambda: |-
            if (x >= 0.5) return x;
            else return 0.5;
        - delta: 1.0
    bus_voltage:
      name: "Voltage"
      accuracy_decimals: 1
      filters:
        - multiply: .953  #compensate for voltage being showing 14.140 at 13.475 real
        - delta: 0.1
# ADC converter to monitor ESP32 board voltage
  - platform: adc
    pin: 36
    name: "Board voltage"
    device_class: voltage
    update_interval: 1s
    attenuation: auto
    accuracy_decimals: 1
    filters:
      # 75k ohm + 22k ohm voltage divider shifts 14.55V to 3.3V
      - multiply: 4.409
      # Small calibration based on actual observation
      - offset: -0.06
      # Prevent changes < +/- 0.1V from reporting
      - delta: 0.1

button:
  # Restart the ESP32 module
  - platform: restart
    name: Restart
  # Button to synchronize the actual fan state with ESPHome, in case someone accidentally
  # adjusts the fan using the panel or remote control. This will issue an IR command 
  # with pre-determined settings and the update ESPHome UI and global variables to match.
  - platform: template
    name: IR synchronize
    id: IR_synchronize
    on_press:
      - remote_transmitter.transmit_pronto:
          data: >
            0000 006D 002A 0000 0041 0006 0004 0017 0020 0040 001F 0021 0020 003F 001F 0021 001F 0021 0040 0020 0020 0060 00FF 0060 0020 00DE 0021 0040 00E0 0020 0020 0040 001F 00BF 0021 0060 00BF 0021 003F 0041 0020 009E 0020 0081 009F 0021
            0060 0040 005D 0042 0041 007D 0023 001E 0022 003E 007F 0040 0082 001E 0022 001E 0041 003D 0021 007E 0041 0020 0020 003E 0021 013E 0021 003E 0060 0020 0041 003F 0040 0040 0021 003F 0021 005E 0021 001F 00E0 06C3
      - lambda: |-
          id(actual_fan_power) = 1;     //On
          id(actual_fan_speed) = 4;     //40%
          id(actual_fan_direction) = 1; //Exhaust
          id(actual_fan_cover) = 1;     //Open
          auto call = id(MaxxFan).make_call();
          call.set_speed(id(actual_fan_speed));
          call.perform();
          call.set_state(id(actual_fan_power));
          call.perform();
          id(maxxfan_direction).publish_state(id(actual_fan_direction));
          id(maxxfan_cover).publish_state(id(actual_fan_cover));
          ESP_LOGD("boot", "Power set to: %d", id(actual_fan_power));
          ESP_LOGD("boot", "Speed set to: %d", id(actual_fan_speed));
          ESP_LOGD("boot", "Direction set to: %d", id(actual_fan_direction));
          ESP_LOGD("boot", "Cover set to: %d", id(actual_fan_cover));

# Houghton air conditioner controls
climate:
  - platform: thermostat
    name: "Air conditioner"
    id: houghton
    sensor: maxxfan_temp
    min_cooling_off_time: 180s
    min_cooling_run_time: 1s
    min_heating_off_time: 180s
    min_heating_run_time: 1s
    min_idle_time: 30s
    min_fan_mode_switching_time: 1s
    cool_action:
      - script.execute: thermostat_script
    heat_action:
      - script.execute: thermostat_script
    idle_action:
      - script.execute: thermostat_script
    fan_mode_auto_action:
      - script.execute: thermostat_script
    fan_mode_low_action:
      - script.execute: thermostat_script
    fan_mode_medium_action:
      - script.execute: thermostat_script
    fan_mode_high_action:
      - script.execute: thermostat_script
    visual:
      min_temperature: 60 Â°F
      max_temperature: 85 Â°F
      temperature_step: 1.0
    startup_delay: true

script:
  - id: thermostat_script
    then:
    - remote_transmitter.transmit_raw:
        carrier_frequency: 38kHz
        code: !lambda |-
          if (id(houghton).action == CLIMATE_ACTION_IDLE || id(houghton).action == CLIMATE_ACTION_OFF) {
            ESP_LOGD("thermostat", "Transmitting IR code for OFF");
            return {};
          } else if (id(houghton).action == CLIMATE_ACTION_COOLING && id(houghton).fan_mode == CLIMATE_FAN_LOW) {
            ESP_LOGD("thermostat", "Transmitting IR code for COOL-LOW");
            return {};
          } else if (id(houghton).action == CLIMATE_ACTION_COOLING && id(houghton).fan_mode == CLIMATE_FAN_MEDIUM) {
            ESP_LOGD("thermostat", "Transmitting IR code for COOL-MEDIUM");
            return {};
          } else if (id(houghton).action == CLIMATE_ACTION_COOLING && id(houghton).fan_mode == CLIMATE_FAN_HIGH) {
            ESP_LOGD("thermostat", "Transmitting IR code for COOL-HIGH");
            return {};
          } else if (id(houghton).action == CLIMATE_ACTION_COOLING && id(houghton).fan_mode == CLIMATE_FAN_AUTO) {
            ESP_LOGD("thermostat", "Transmitting IR code for COOL-AUTO");
            return {};
          } else if (id(houghton).action == CLIMATE_ACTION_HEATING && id(houghton).fan_mode == CLIMATE_FAN_LOW) {
            ESP_LOGD("thermostat", "Transmitting IR code for HEAT-LOW");
            return {+4500,-2700,+350,-450,+300,-950,+300,-950,+300,-400,+350,-900,+350,-400,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-400,+350,-400,+350,-900,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-450,+300,-900,+350,-400,+300,-950,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-900,+350,-400,+350,-900,+300,-20350,+4500,-6700,+9150,-4900,+300,-500,+250,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-950,+250,-450,+300,-450,+300,-450,+300,-450,+250,-1000,+250,-450,+300,-950,+300,-450,+300,-450,+300,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-950,+300,-450,+250,-500,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+250,-20400,+4500,-50100};
          } else if (id(houghton).action == CLIMATE_ACTION_HEATING && id(houghton).fan_mode == CLIMATE_FAN_MEDIUM) {
            ESP_LOGD("thermostat", "Transmitting IR code for HEAT-MEDIUM");
            return {};
          } else if (id(houghton).action == CLIMATE_ACTION_HEATING && id(houghton).fan_mode == CLIMATE_FAN_HIGH) {
            ESP_LOGD("thermostat", "Transmitting IR code for HEAT-HIGH");
            return {+4600,-2650,+250,-450,+300,-1000,+250,-1000,+250,-500,+250,-950,+300,-450,+300,-450,+250,-450,+300,-450,+300,-500,+250,-450,+300,-950,+300,-450,+250,-1000,+300,-400,+300,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+250,-500,+250,-500,+300,-450,+250,-1000,+250,-450,+300,-450,+300,-950,+300,-450,+300,-950,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-950,+300,-950,+300,-20350,+4500,-6650,+9200,-4900,+350,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+350,-400,+300,-450,+300,-450,+300,-450,+250,-450,+350,-400,+350,-400,+300,-450,+300,-450,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-900,+350,-400,+350,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-900,+350,-900,+350,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-950,+300,-450,+300,-900,+350,-900,+300,-20900,+4400,-50100};
          } else if (id(houghton).action == CLIMATE_ACTION_HEATING && id(houghton).fan_mode == CLIMATE_FAN_AUTO) {
            ESP_LOGD("thermostat", "Transmitting IR code for HEAT-AUTO");
            return {};
          } else { // UNKNOWN therefore OFF
            ESP_LOGD("thermostat", "UNKNOWN CONDITION!!!  Transmitting IR code for OFF");
            return {};
          }
  # - id: thermostat_script
  #   then:
  #   - remote_transmitter.transmit_raw:
  #       carrier_frequency: 38kHz
  #       code: !lambda |-
  #         // Variable to store dictionary of all IR transmitter codes. Key is human readable name and value is string containing
  #         // int32_t values.  Later will parse from string to vector.  Could not get dictionary containing vector values to work.
  #         std::map<std::string, std::string> hvac_codes;
  #         // Variable to store selected transmitter code
  #         std::vector<int32_t> hvac_code;

  #         //Populate dictionary with all possible IR transmitter codes
  #         hvac_codes["mode=cool;fan=low"] = "+4500,-2700,+300,-450,+300,-950,+250,-1000,+300,-450,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-950,+350,-400,+300,-400,+350,-400,+350,-350,+350,-450,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-900,+350,-900,+350,-400,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-900,+350,-400,+350,-400,+300,-450,+300,-450,+300,-20300,+4500,-6700,+9150,-4900,+350,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-950,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-20400,+4450,-50100";
  #         hvac_codes["mode=cool;fan=medium"] = "+4500,-2700,+300,-450,+300,-950,+250,-950,+300,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+300,-450,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-450,+300,-950,+300,-950,+250,-500,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-450,+250,-20400,+4500,-6650,+9200,-4900,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-900,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-900,+350,-900,+350,-400,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-950,+300,-400,+350,-400,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-950,+300,-450,+250,-1000,+250,-20900,+4450,-50100";
  #         hvac_codes["mode=cool;fan=high"] = "+4500,-2700,+300,-450,+300,-950,+250,-1000,+250,-500,+250,-1000,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+250,-1000,+250,-500,+250,-1000,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+250,-500,+250,-500,+250,-20350,+4500,-6700,+9150,-4950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-950,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-900,+350,-400,+300,-450,+300,-950,+300,-450,+300,-400,+350,-900,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-900,+350,-900,+300,-450,+300,-900,+350,-20850,+4400,-50100";
  #         hvac_codes["mode=cool;fan=auto"] = "+4500,-2700,+300,-450,+300,-1000,+250,-950,+300,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-450,+250,-500,+250,-1000,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+250,-1000,+250,-500,+250,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+250,-1000,+250,-450,+300,-500,+250,-450,+300,-20350,+4500,-6700,+9150,-4900,+350,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-950,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-900,+300,-900,+350,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-950,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-950,+250,-1000,+250,-450,+300,-450,+300,-20850,+4500,-50100";
  #         hvac_codes["mode=heat;fan=low"] = "+4500,-2700,+350,-450,+300,-950,+300,-950,+300,-400,+350,-900,+350,-400,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-400,+350,-400,+350,-900,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-450,+300,-900,+350,-400,+300,-950,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-900,+350,-400,+350,-900,+300,-20350,+4500,-6700,+9150,-4900,+300,-500,+250,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-950,+250,-450,+300,-450,+300,-450,+300,-450,+250,-1000,+250,-450,+300,-950,+300,-450,+300,-450,+300,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-950,+300,-450,+250,-500,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+250,-20400,+4500,-50100";
  #         hvac_codes["mode=heat;fan=medium"] = "+4550,-2650,+300,-500,+250,-950,+300,-950,+300,-450,+250,-1000,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+300,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-950,+300,-450,+300,-450,+300,-900,+350,-400,+350,-900,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-950,+300,-950,+300,-20300,+4500,-6700,+9100,-4950,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-950,+300,-450,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-950,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-1000,+250,-1000,+250,-500,+250,-1000,+250,-20900,+4450,-50100";
  #         hvac_codes["mode=heat;fan=high"] = "+4600,-2650,+250,-450,+300,-1000,+250,-1000,+250,-500,+250,-950,+300,-450,+300,-450,+250,-450,+300,-450,+300,-500,+250,-450,+300,-950,+300,-450,+250,-1000,+300,-400,+300,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+250,-500,+250,-500,+300,-450,+250,-1000,+250,-450,+300,-450,+300,-950,+300,-450,+300,-950,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-950,+300,-950,+300,-20350,+4500,-6650,+9200,-4900,+350,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+350,-400,+300,-450,+300,-450,+300,-450,+250,-450,+350,-400,+350,-400,+300,-450,+300,-450,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-900,+350,-400,+350,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-900,+350,-900,+350,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-950,+300,-450,+300,-900,+350,-900,+300,-20900,+4400,-50100";
  #         hvac_codes["mode=heat;fan=auto"] = "+4550,-2700,+300,-450,+250,-1000,+250,-1000,+250,-500,+250,-950,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-950,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-950,+300,-450,+300,-950,+300,-450,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-950,+300,-20350,+4500,-6700,+9200,-4850,+350,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-950,+300,-450,+300,-950,+250,-450,+350,-400,+300,-450,+300,-450,+300,-950,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-900,+300,-950,+300,-950,+300,-450,+300,-450,+300,-900,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-950,+300,-900,+350,-900,+300,-20900,+4450,-50100";
  #         //hvac_codes["mode=heatcool;fan=low"] = "";
  #         //hvac_codes["mode=heatcool;fan=medium"] = "";
  #         //hvac_codes["mode=heatcool;fan=high"] = "";
  #         //hvac_codes["mode=heatcool;fan=auto"] = "";
  #         hvac_codes["mode=off"] = "+4550,-2700,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-450,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-950,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-1000,+250,-1000,+250,-500,+250,-450,+300,-950,+250,-20400,+4500,-6650,+9200,-4900,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-1000,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-950,+300,-950,+300,-450,+300,-450,+250,-450,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-950,+300,-900,+350,-450,+300,-450,+300,-900,+300,-450,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-900,+350,-450,+250,-950,+300,-20350,+4450,-50100";

  #         // Constant to store mode names which correspond to enums maintained by ESPHome
  #         std::string modes[] = { "off", "heat_cool", "cool", "heat", "fan_only", "dry", "auto" };
  #         std::string fan_modes[] = { "on", "off", "auto", "low", "medium", "high", "middle", "focus", "diffuse", "quiet" };
          
  #         // Develop key based on current thermostat settings
  #         std::string key = "mode=off";
  #         ESP_LOGD("thermostat", "Mode: %d; Action: %d", id(houghton).mode, id(houghton).action);
  #         ESP_LOGD("thermostat", "Mode: %s; Fan_mode: %s", modes[id(houghton).mode], fan_modes[id(houghton).fan_mode.value_or(2)]);
  #         if (!id(houghton).mode == 0 && !id(houghton).action == 4) {
  #           key = std::string("mode=") + modes[id(houghton).mode] + ";fan=" + fan_modes[id(houghton).fan_mode.value_or(1)];
  #         }

  #         // Choose value based on key and log
  #         std::string value = hvac_codes[key];
  #         ESP_LOGD("thermostat", "Key: %s", key.c_str());
  #         ESP_LOGD("thermostat", "Value: %s", value.c_str());

  #         // Parse chosen value from comma delimited string to vector of int32_t 
  #         char * token;
  #         char seps[] = ",";
  #         token = strtok (&value[0],seps);
  #         while (token != NULL)
  #         {
  #           hvac_code.push_back(static_cast<uint32_t>(std::stoul(token)));
  #           token = strtok (NULL, seps);
  #         }

  #         // Return transmitter code
  #         return hvac_code;
  # - id: thermostat_script2
  #   then:
  #   - lambda: |-               
  #       std::vector<int32_t> hvac_code;
  #       hvac_code = {};
  #       // Call remote transmitter using selected code
  #       auto call = id(my_remote_transmitter).transmit();
  #       esphome::remote_base::RemoteTransmitData * RTD;
  #       RTD.set_data(hvac_code);
  #       RTD.set_carrier_frequency(38);
  #       esphome::remote_base::RawAction<esphome::remote_base::RemoteTransmitData>().encode(RTD);
  #       call.get_data(RTD);
  #       call.perform();
  # - id: thermostat_script3
  #   then:
  #   - lambda: |-       
  #       // Variable to store dictionary of all IR transmitter codes. Key is human readable name and value is string containing
  #       // int32_t values.  Later will parse from string to vector.  Could not get dictionary containing vector values to work.
  #       std::map<std::string, std::string> hvac_codes;
  #       // Variable to store selected transmitter code
  #       std::vector<int32_t> hvac_code;

  #       //Populate dictionary with all possible IR transmitter codes
  #       hvac_codes[std::string("mode=cool;fan=low")] = "+4500,-2700,+300,-450,+300,-950,+250,-1000,+300,-450,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-950,+350,-400,+300,-400,+350,-400,+350,-350,+350,-450,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-900,+350,-900,+350,-400,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-900,+350,-400,+350,-400,+300,-450,+300,-450,+300,-20300,+4500,-6700,+9150,-4900,+350,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-950,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-20400,+4450,-50100";
  #       hvac_codes[std::string("mode=cool;fan=medium")] = "+4500,-2700,+300,-450,+300,-950,+250,-950,+300,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+300,-450,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-450,+300,-950,+300,-950,+250,-500,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-450,+250,-20400,+4500,-6650,+9200,-4900,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-900,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-900,+350,-900,+350,-400,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-950,+300,-400,+350,-400,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-950,+300,-450,+250,-1000,+250,-20900,+4450,-50100";
  #       hvac_codes[std::string("mode=cool;fan=high")] = "+4500,-2700,+300,-450,+300,-950,+250,-1000,+250,-500,+250,-1000,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+250,-1000,+250,-500,+250,-1000,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+250,-500,+250,-500,+250,-20350,+4500,-6700,+9150,-4950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-1000,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-950,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-900,+350,-400,+300,-450,+300,-950,+300,-450,+300,-400,+350,-900,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-900,+350,-900,+300,-450,+300,-900,+350,-20850,+4400,-50100";
  #       hvac_codes[std::string("mode=cool;fan=auto")] = "+4500,-2700,+300,-450,+300,-1000,+250,-950,+300,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-450,+250,-500,+250,-1000,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+250,-1000,+250,-500,+250,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+250,-1000,+250,-450,+300,-500,+250,-450,+300,-20350,+4500,-6700,+9150,-4900,+350,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-950,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-900,+300,-900,+350,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-950,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-950,+250,-1000,+250,-450,+300,-450,+300,-20850,+4500,-50100";
  #       hvac_codes[std::string("mode=heat;fan=low")] = "+4500,-2700,+350,-450,+300,-950,+300,-950,+300,-400,+350,-900,+350,-400,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-400,+350,-400,+350,-900,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-450,+300,-900,+350,-400,+300,-950,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-450,+300,-900,+350,-400,+350,-900,+300,-20350,+4500,-6700,+9150,-4900,+300,-500,+250,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-950,+250,-450,+300,-450,+300,-450,+300,-450,+250,-1000,+250,-450,+300,-950,+300,-450,+300,-450,+300,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-950,+300,-450,+250,-500,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+250,-20400,+4500,-50100";
  #       hvac_codes[std::string("mode=heat;fan=medium")] = "+4550,-2650,+300,-500,+250,-950,+300,-950,+300,-450,+250,-1000,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-1000,+300,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-950,+300,-450,+300,-450,+300,-900,+350,-400,+350,-900,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-950,+300,-950,+300,-950,+300,-20300,+4500,-6700,+9100,-4950,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-950,+300,-450,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-950,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-1000,+250,-1000,+250,-500,+250,-1000,+250,-20900,+4450,-50100";
  #       hvac_codes[std::string("mode=heat;fan=high")] = "+4600,-2650,+250,-450,+300,-1000,+250,-1000,+250,-500,+250,-950,+300,-450,+300,-450,+250,-450,+300,-450,+300,-500,+250,-450,+300,-950,+300,-450,+250,-1000,+300,-400,+300,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+300,-450,+250,-450,+300,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+250,-500,+250,-500,+300,-450,+250,-1000,+250,-450,+300,-450,+300,-950,+300,-450,+300,-950,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-950,+300,-950,+300,-20350,+4500,-6650,+9200,-4900,+350,-450,+300,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+350,-400,+300,-450,+300,-450,+300,-450,+250,-450,+350,-400,+350,-400,+300,-450,+300,-450,+300,-950,+300,-400,+350,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-900,+350,-400,+350,-400,+350,-400,+300,-450,+300,-950,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-900,+350,-900,+350,-450,+250,-500,+250,-950,+300,-450,+300,-450,+300,-400,+350,-400,+300,-450,+300,-450,+300,-950,+300,-450,+300,-900,+350,-900,+300,-20900,+4400,-50100";
  #       hvac_codes[std::string("mode=heat;fan=auto")] = "+4550,-2700,+300,-450,+250,-1000,+250,-1000,+250,-500,+250,-950,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-950,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-950,+300,-450,+300,-950,+300,-450,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-950,+300,-20350,+4500,-6700,+9200,-4850,+350,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-950,+300,-450,+300,-950,+250,-450,+350,-400,+300,-450,+300,-450,+300,-950,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-900,+300,-950,+300,-950,+300,-450,+300,-450,+300,-900,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-950,+300,-900,+350,-900,+300,-20900,+4450,-50100";
  #       //hvac_codes[std::string("mode=heatcool;fan=low")] = "";
  #       //hvac_codes[std::string("mode=heatcool;fan=medium")] = "";
  #       //hvac_codes[std::string("mode=heatcool;fan=high")] = "";
  #       //hvac_codes[std::string("mode=heatcool;fan=auto")] = "";
  #       hvac_codes[std::string("mode=off")] = std::string("+4550,-2700,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-950,+250,-500,+250,-500,+250,-500,+250,-450,+300,-950,+300,-450,+250,-500,+250,-1000,+250,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-500,+250,-1000,+250,-1000,+250,-450,+300,-950,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+250,-1000,+250,-1000,+250,-500,+250,-450,+300,-950,+250,-20400,+4500,-6650,+9200,-4900,+300,-450,+300,-450,+250,-500,+250,-450,+300,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+250,-500,+250,-500,+250,-500,+250,-450,+300,-450,+300,-450,+250,-1000,+300,-950,+250,-500,+250,-450,+300,-450,+300,-450,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-950,+300,-950,+300,-450,+300,-450,+250,-450,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+350,-400,+300,-450,+300,-450,+300,-450,+300,-400,+350,-400,+300,-950,+300,-900,+350,-450,+300,-450,+300,-900,+300,-450,+300,-950,+300,-450,+300,-450,+250,-500,+250,-450,+300,-450,+300,-450,+300,-900,+350,-450,+250,-950,+300,-20350,+4450,-50100");

  #       for (auto itr = hvac_codes.begin(); itr != hvac_codes.end(); ++itr) {
  #           ESP_LOGD("thermostat", "Key: %s; Value: %s", itr->first, itr->second);
  #       }

  #       // Constant to store mode names which correspond to enums maintained by ESPHome
  #       const char * modes[] = { "off", "heat_cool", "cool", "heat", "fan_only", "dry", "auto" };
  #       const char * fan_modes[] = { "on", "off", "auto", "low", "medium", "high", "middle", "focus", "diffuse", "quiet" };
        
  #       // Develop key based on current thermostat settings
  #       std::string key = std::string("mode=off");
  #       ESP_LOGD("thermostat", "Mode: %d; Action: %d", id(houghton).mode, id(houghton).action);
  #       ESP_LOGD("thermostat", "Mode: %s; Fan_mode: %s", modes[id(houghton).mode], fan_modes[id(houghton).fan_mode.value_or(2)]);
  #       if (!id(houghton).mode == 0 && !id(houghton).action == 4) {
  #         key = std::string("mode=") + modes[id(houghton).mode] + ";fan=" + fan_modes[id(houghton).fan_mode.value_or(1)];
  #       }
  #       // Choose value based on key and log
  #       std::string value = hvac_codes[key];
  #       ESP_LOGD("thermostat", "Key: %s", key.c_str());
  #       ESP_LOGD("thermostat", "Value: %s", value.c_str());
  #       // Parse chosen value from comma delimited string to vector of int32_t 
  #       char * token;
  #       char seps[] = ",";
  #       token = strtok (&value[0],seps);
  #       while (token != NULL)
  #       {
  #         hvac_code.push_back(static_cast<uint32_t>(std::stoul(token)));
  #         token = strtok (NULL, seps);
  #         ESP_LOGD("thermostat", "Token: %s", token);
  #       }
  #       // Call remote transmitter based on selected code
  #       auto call = id(my_remote_transmitter).transmit();
  #       esphome::remote_base::RemoteTransmitData().set_data(hvac_code);
  #       esphome::remote_base::RemoteTransmitData().set_carrier_frequency(38);
  #       call.perform();
  # - id: thermostat_script
  #   then:
  #   - remote_transmitter.transmit_raw:
  #       carrier_frequency: 38kHz
  #       code: !lambda |-
  #         std::vector<int32_t> hvac_code;
  #         hvac_code = {};
  #         return hvac_code;

    # CLIMATE_MODE_OFF = 0,
    # CLIMATE_MODE_HEAT_COOL = 1,
    # CLIMATE_MODE_COOL = 2,
    # CLIMATE_MODE_HEAT = 3,
    # CLIMATE_MODE_FAN_ONLY = 4,
    # CLIMATE_MODE_DRY = 5,
    # CLIMATE_MODE_AUTO = 6

    # CLIMATE_FAN_ON = 0,
    # CLIMATE_FAN_OFF = 1,
    # CLIMATE_FAN_AUTO = 2,
    # CLIMATE_FAN_LOW = 3,
    # CLIMATE_FAN_MEDIUM = 4,
    # CLIMATE_FAN_HIGH = 5,
    # CLIMATE_FAN_MIDDLE = 6,
    # CLIMATE_FAN_FOCUS = 7,
    # CLIMATE_FAN_DIFFUSE = 8,
    # CLIMATE_FAN_QUIET = 9,

    # CLIMATE_ACTION_OFF = 0,
    # CLIMATE_ACTION_COOLING = 2,
    # CLIMATE_ACTION_HEATING = 3,
    # CLIMATE_ACTION_IDLE = 4,
    # CLIMATE_ACTION_DRYING = 5,
    # CLIMATE_ACTION_FAN = 6,
